package kr.co.jhta.springboot12.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.ProviderManagerBuilder;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer;
import org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

// spring security : 스프링 기반의 애플리케이션 보안을 담당하는 프레임워크
// fillter chain 방식사용

// 설정파일 빈을 등록
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	// 패스워드 암호화
	// BCryptPasswordEncoder
	// BCrypt 라는 해쉬 함수를 이용해서 패스워드를 암호화하는 목적으로 설계된 클래스
	
	
	@Bean // 이런 객체를 스프링에게 -> 관리해줘
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	// 임시 비번으로 로그인 -> 불편
	// 새로운 사용자정보를 추가
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		// 사용자 ID : user1
		// password : aaa
		
//		InMemoryUserDetailsManagerConfigurer iudm = auth.inMemoryAuthentication();
	
//		UserDetailsBuilder udb = iudm.withUser("user1");
	
//		udb = udb.password("$2a$10$02.R0fNAD5A0bC1cQVlS.uhgPXmBJHNtZMaztyKxDykBL6frurXMC");

//		udb = udb.roles("USER");
		
		auth.inMemoryAuthentication()
			.withUser("user1")
			.password("$2a$10$02.R0fNAD5A0bC1cQVlS.uhgPXmBJHNtZMaztyKxDykBL6frurXMC")
			.roles("ADMIN");
	
		
		
	}
	// 인가가 필요한 리소스 설정하기
	
	//HttpSecurity -> configure
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		
		http.authorizeHttpRequests()
			// 인증된 사람만 접근가능
			.antMatchers("/board/**").authenticated()
			// USER Role만 접근가능
			.antMatchers("/member/**").hasRole("USER")
			// ADMIN Role만 접근가능
			.antMatchers("/admin/**").hasRole("ADMIN")
			// 그 외 모든 요청 허용
			.anyRequest().permitAll()
			.and() // 추가
			.formLogin() // form 기반의 로그인 경우
				.loginPage("/clogin")
				.usernameParameter("username") // 로그인 폼에서 id 가져올 값의 Parameter name
				.passwordParameter("password") // 로그인 폼에서 password 가져올 값의 Parameter name
				.loginProcessingUrl("/login") // 로그인 처리할 URL
				.defaultSuccessUrl("/") // 로그인 성공하면 "/"로 이동
				.failureUrl("clogin?error=true") // 로그인 실패하면 
			.and()
			.logout()
				.logoutUrl("/clogout")
				.logoutSuccessUrl("/"); //로그아웃 성공시 "/"로 이동
			//access("hasRole('USER') or hasRole('ADUMIN')");
		
		
//		http.authorizeHttpRequests()
//			// 인증된 사람만 접근가능
//			.antMatchers("/board/**").authenticated()
//			// USER Role만 접근가능
//			.antMatchers("/member/**").hasRole("USER")
//			// ADMIN Role만 접근가능
//			.antMatchers("/admin").hasRole("ADMIN")
//			.anyRequest().permitAll()
//			.and()
//			.formLogin()
//			.loginPage("/login")
//			.permitAll();
		}
}
